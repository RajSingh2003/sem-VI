import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.util.Hashtable;
import java.util.Map;
import java.util.Scanner;

public class PhoneBookProgram {
    public static void main(String[] args) {
        // Create a Hashtable to store names and phone numbers
        Hashtable<String, String> phoneBook = new Hashtable<>();

        // Load data from the text file into the Hashtable
        loadPhoneBookData(phoneBook, "phonebook.txt");

        // Scanner to accept user input
        Scanner scanner = new Scanner(System.in);

        // Input a name or phone number
        System.out.print("Enter a name or phone number: ");
        String input = scanner.nextLine();

        // Search for the corresponding value in the Hashtable
        String result = searchPhoneBook(phoneBook, input);

        // Display the result
        System.out.println("Result: " + result);

        // Close the scanner
        scanner.close();
    }

    private static void loadPhoneBookData(Map<String, String> phoneBook, String fileName) {
        try (BufferedReader br = new BufferedReader(new FileReader(fileName))) {
            String line;
            while ((line = br.readLine()) != null) {
                // Split the line into fields using tabs
                String[] fields = line.split("\t");

                // Check if the line has at least two fields (name and phone number)
                if (fields.length >= 2) {
                    String name = fields[0];
                    String phoneNumber = fields[1];

                    // Add to the Hashtable
                    phoneBook.put(name, phoneNumber);
                }
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static String searchPhoneBook(Map<String, String> phoneBook, String input) {
        // Check if the input is a name or a phone number
        if (phoneBook.containsKey(input)) {
            // Input is a name, return the corresponding phone number
            return phoneBook.get(input);
        } else if (phoneBook.containsValue(input)) {
            // Input is a phone number, search for the corresponding name
            for (Map.Entry<String, String> entry : phoneBook.entrySet()) {
                if (entry.getValue().equals(input)) {
                    return entry.getKey();
                }
            }
        }

        // If no match is found
        return "Not found";
    }
}





#include <stdio.h>
#include <stdlib.h>
#include <mpi.h>

int main(int argc, char
L *argv[]) {
    MPI_Init(&argc, &argv);

    int rank, size;
    MPI_Comm_rank(MPI_COMM_WORLD, &rank);
    MPI_Comm_size(MPI_COMM_WORLD, &size);

    // Calculate the number of elements each process will handle
    int elements_per_process = 1000 / size;
    
    // Initialize a seed for random number generation based on the rank
    srand(rank);

    // Generate random numbers on each process
    int local_numbers[elements_per_process];
    for (int i = 0; i < elements_per_process; i++) {
        local_numbers[i] = rand();
    }

    // Gather all local numbers to process 0
    int all_numbers[1000];
    MPI_Gather(local_numbers, elements_per_process, MPI_INT, all_numbers, elements_per_process, MPI_INT, 0, MPI_COMM_WORLD);

    // Print the numbers on process 0
    if (rank == 0) {
        printf("Generated Numbers:\n");
        for (int i = 0; i < 1000; i++) {
            printf("%d ", all_numbers[i]);
        }
        printf("\n");
    }

    MPI_Finalize();
    return 0;
}



#include <stdio.h>
#include <stdlib.h>
#include <mpi.h>

int main(int argc, char *argv[]) {
    int rank, size;

    MPI_Init(&argc, &argv);
    MPI_Comm_rank(MPI_COMM_WORLD, &rank);
    MPI_Comm_size(MPI_COMM_WORLD, &size);

    int *randomNumbers = (int *)malloc(1000 * sizeof(int));
    for (int i = 0; i < 1000; i++) {
        randomNumbers[i] = rand() % 1000;  // Generating random numbers between 0 and 999
    }

    int localMin = randomNumbers[0];
    int localMax = randomNumbers[0];

    for (int i = 1; i < 1000; i++) {
        if (randomNumbers[i] < localMin) {
            localMin = randomNumbers[i];
        }
        if (randomNumbers[i] > localMax) {
            localMax = randomNumbers[i];
        }
    }

    int globalMin, globalMax;

    MPI_Reduce(&localMin, &globalMin, 1, MPI_INT, MPI_MIN, 0, MPI_COMM_WORLD);
    MPI_Reduce(&localMax, &globalMax, 1, MPI_INT, MPI_MAX, 0, MPI_COMM_WORLD);

    if (rank == 0) {
        printf("Minimum number: %d\n", globalMin);
        printf("Maximum number: %d\n", globalMax);
    }

    free(randomNumbers);
    MPI_Finalize();

    return 0;
}


